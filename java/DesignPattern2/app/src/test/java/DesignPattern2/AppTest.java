/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package DesignPattern2;

import org.junit.jupiter.api.Test;

import DesignPattern2.composite.Divides;
import DesignPattern2.composite.Expression;
import DesignPattern2.composite.Minus;
import DesignPattern2.composite.MyNumber;
import DesignPattern2.composite.Operation;
import DesignPattern2.composite.Plus;
import DesignPattern2.composite.Times;
import DesignPattern2.strategy.Compute;
import DesignPattern2.strategy.CountDepth;
import DesignPattern2.strategy.CountNbs;
import DesignPattern2.strategy.CountOps;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.DisplayName;

class AppTest {
    @Test
    @DisplayName("Test operation Plus")
    public void test1()
    {
        Operation plus = new Plus(new Expression[]{new MyNumber(5),new MyNumber(4)});
        assertEquals(plus.execute(new Compute()), 9);
    }
    @Test
    @DisplayName("Test operation Minus")
    public void test2()
    {
        Operation minus = new Minus(new Expression[]{new MyNumber(5),new MyNumber(4)});
        assertEquals(minus.execute(new Compute()), 1);
    }
    @Test
    @DisplayName("Test operation Times")
    public void test3()
    {
        Operation times = new Times(new Expression[]{new MyNumber(5),new MyNumber(4)});
        assertEquals(times.execute(new Compute()), 20);
    }
    @Test
    @DisplayName("Test operation Divides")
    public void test4()
    {
        Operation divides = new Divides(new Expression[]{new MyNumber(20),new MyNumber(4)});
        assertEquals(divides.execute(new Compute()), 5);
    }
    @Test
    @DisplayName("Test multiple binary operation")
    public void test5()
    {
        Operation plus = new Plus(new Expression[]{new MyNumber(5),new MyNumber(4)});
        Operation minus = new Minus(new Expression[]{plus, new MyNumber(1)});
        Operation divide = new Divides(new Expression[]{minus, new MyNumber(2)});
        assertEquals(divide.execute(new Compute()), 4);
    }
    @Test
    @DisplayName("Test multiple operation")
    public void test6()
    {
        Operation plus = new Plus(new Expression[]{new MyNumber(5),new MyNumber(4),new MyNumber(6),new MyNumber(10)});//25
        Operation divide = new Divides(new Expression[]{new MyNumber(100),new MyNumber(5),new MyNumber(2)});//10
        Operation minus = new Minus(new Expression[]{plus, new MyNumber(1),divide});//14
        Operation times = new Times(new Expression[]{minus, new MyNumber(2), new MyNumber(10)});//280
        assertEquals(times.execute(new Compute()), 280);
    }
    @Test
    @DisplayName("Test count operation")
    public void test7()
    {
        Operation plus = new Plus(new Expression[]{new MyNumber(5),new MyNumber(4),new MyNumber(6),new MyNumber(10)});//25
        Operation divide = new Divides(new Expression[]{new MyNumber(100),new MyNumber(5),new MyNumber(2)});//10
        Operation minus = new Minus(new Expression[]{plus, new MyNumber(1),divide});//14
        Operation times = new Times(new Expression[]{minus, new MyNumber(2), new MyNumber(10)});//280
        assertEquals(times.execute(new CountOps()), 4);
    }
    @Test
    @DisplayName("Test count numbers")
    public void test8()
    {
        Operation plus = new Plus(new Expression[]{new MyNumber(5),new MyNumber(4),new MyNumber(6),new MyNumber(10)});//25
        Operation divide = new Divides(new Expression[]{new MyNumber(100),new MyNumber(5),new MyNumber(2)});//10
        Operation minus = new Minus(new Expression[]{plus, new MyNumber(1),divide});//14
        Operation times = new Times(new Expression[]{minus, new MyNumber(2), new MyNumber(10)});//280
        assertEquals(times.execute(new CountNbs()), 10);
    }
    @Test
    @DisplayName("Test count Depth")
    public void test9()
    {
        Operation plus = new Plus(new Expression[]{new MyNumber(5),new MyNumber(4),new MyNumber(6),new MyNumber(10)});//25
        Operation plus2 = new Plus(new Expression[]{new MyNumber(50), new MyNumber(50)});
        Operation divide = new Divides(new Expression[]{plus2,new MyNumber(5),new MyNumber(2)});//10
        Operation minus = new Minus(new Expression[]{plus, new MyNumber(1),divide});//14
        Operation times = new Times(new Expression[]{minus, new MyNumber(2), new MyNumber(10)});//280
        assertEquals(times.execute(new CountDepth()), 4);
    }
}
