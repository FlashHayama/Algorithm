/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef DIGITALCLOCK_H_
#define DIGITALCLOCK_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the DigitalClock state machine.
*/
typedef struct DigitalClock DigitalClock;

/*!
* Forward declaration of the data structure for the DigitalClockIface interface scope.
*/
typedef struct DigitalClockIface DigitalClockIface;

#ifdef __cplusplus
}
#endif

#include "../src/sc_types.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'DigitalClock'.
*/

#ifndef DIGITALCLOCK_EVENTQUEUE_BUFFERSIZE
#define DIGITALCLOCK_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef DIGITALCLOCK_IN_EVENTQUEUE_BUFFERSIZE
#define DIGITALCLOCK_IN_EVENTQUEUE_BUFFERSIZE DIGITALCLOCK_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define DIGITALCLOCK_STATE_COUNT 3

/*! Define dimension of the state configuration vector for orthogonal states. */
#define DIGITALCLOCK_MAX_ORTHOGONAL_STATES 1

/*! Define indices of states in the StateConfVector */
#define SCVI_DIGITALCLOCK_MAIN_REGION_DISPLAYHOUR 0
#define SCVI_DIGITALCLOCK_MAIN_REGION_DISPLAYSECOND 0
#define SCVI_DIGITALCLOCK_MAIN_REGION_DISPLAYDATE 0


/*
 * Enum of event names in the statechart.
 */
typedef enum  {
	DigitalClock_invalid_event = SC_INVALID_EVENT_VALUE,
	DigitalClock_b1
} DigitalClockEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	DigitalClockEventID name;
} digitalclock_event;

/*
 * Queue that holds the raised events.
 */
typedef struct digitalclock_eventqueue_s {
	digitalclock_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} digitalclock_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	DigitalClock_last_state,
	DigitalClock_main_region_DisplayHour,
	DigitalClock_main_region_DisplaySecond,
	DigitalClock_main_region_DisplayDate
} DigitalClockStates;


/*! Type declaration of the data structure for the DigitalClockIface interface scope. */
struct DigitalClockIface
{
	sc_boolean b1_raised;
	sc_integer hours;
	sc_integer minutes;
	sc_integer seconds;
	sc_integer dayInMonth;
	sc_integer month;
};






/*! 
 * Type declaration of the data structure for the DigitalClock state machine.
 * This data structure has to be allocated by the client code. 
 */
struct DigitalClock
{
	DigitalClockStates stateConfVector[DIGITALCLOCK_MAX_ORTHOGONAL_STATES];
	DigitalClockIface iface;
	sc_boolean isExecuting;
	digitalclock_eventqueue in_event_queue;
	digitalclock_event in_buffer[DIGITALCLOCK_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the DigitalClock state machine data structures. Must be called before first usage.*/
extern void digitalClock_init(DigitalClock* handle);


/*! Activates the state machine. */
extern void digitalClock_enter(DigitalClock* handle);

/*! Deactivates the state machine. */
extern void digitalClock_exit(DigitalClock* handle);




/*! Raises the in event 'b1' that is defined in the default interface scope. */ 
extern void digitalClock_raise_b1(DigitalClock* handle);
/*! Gets the value of the variable 'hours' that is defined in the default interface scope. */ 
extern sc_integer digitalClock_get_hours(const DigitalClock* handle);
/*! Sets the value of the variable 'hours' that is defined in the default interface scope. */ 
extern void digitalClock_set_hours(DigitalClock* handle, sc_integer value);
/*! Gets the value of the variable 'minutes' that is defined in the default interface scope. */ 
extern sc_integer digitalClock_get_minutes(const DigitalClock* handle);
/*! Sets the value of the variable 'minutes' that is defined in the default interface scope. */ 
extern void digitalClock_set_minutes(DigitalClock* handle, sc_integer value);
/*! Gets the value of the variable 'seconds' that is defined in the default interface scope. */ 
extern sc_integer digitalClock_get_seconds(const DigitalClock* handle);
/*! Sets the value of the variable 'seconds' that is defined in the default interface scope. */ 
extern void digitalClock_set_seconds(DigitalClock* handle, sc_integer value);
/*! Gets the value of the variable 'dayInMonth' that is defined in the default interface scope. */ 
extern sc_integer digitalClock_get_dayInMonth(const DigitalClock* handle);
/*! Sets the value of the variable 'dayInMonth' that is defined in the default interface scope. */ 
extern void digitalClock_set_dayInMonth(DigitalClock* handle, sc_integer value);
/*! Gets the value of the variable 'month' that is defined in the default interface scope. */ 
extern sc_integer digitalClock_get_month(const DigitalClock* handle);
/*! Sets the value of the variable 'month' that is defined in the default interface scope. */ 
extern void digitalClock_set_month(DigitalClock* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean digitalClock_is_active(const DigitalClock* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean digitalClock_is_final(const DigitalClock* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean digitalClock_is_state_active(const DigitalClock* handle, DigitalClockStates state);


#ifdef __cplusplus
}
#endif 

#endif /* DIGITALCLOCK_H_ */
