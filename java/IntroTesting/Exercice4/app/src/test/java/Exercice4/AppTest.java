/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Exercice4;

import org.junit.jupiter.api.Test;

import Exercice4.statepattern.DigitalClock;
import Exercice4.statepattern.states.DisplayDate;
import Exercice4.statepattern.states.DisplaySecond;
import Exercice4.statepattern.states.SetDate;
import Exercice4.statepattern.states.SetHour;
import Exercice4.statepattern.states.StateEnum;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.DisplayName;

class AppTest {
    @Test
    @DisplayName("Test constructor")
    public void test1()
    {
        DigitalClock dc = new DigitalClock();
        assertEquals(dc.getState(), StateEnum.DISPLAY_HOUR);
        assertEquals(dc.getHours(), 0);
        assertEquals(dc.getMinutes(), 59);
        assertEquals(dc.getSeconds(), 55);
        assertEquals(dc.getDayInMonth(), 1);
        assertEquals(dc.getMonth(), 1);
    }

    @Test
    @DisplayName("Test transition B1 for Display methods")
    public void test2()
    {
        DigitalClock dc = new DigitalClock();
        assertEquals(dc.getState(), StateEnum.DISPLAY_HOUR);
        dc.b1();
        assertEquals(dc.getState(), StateEnum.DISPLAY_DATE);
        dc.b1();
        assertEquals(dc.getState(), StateEnum.DISPLAY_SECOND);
        dc.b1();
        assertEquals(dc.getState(), StateEnum.DISPLAY_HOUR);
    }

    @Test
    @DisplayName("Test transition B2 for Display methods")
    public void test3()
    {
        DigitalClock dc = new DigitalClock();
        assertEquals(dc.getState(), StateEnum.DISPLAY_HOUR);
        dc.b2();
        assertEquals(dc.getState(), StateEnum.DISPLAY_SECOND);
        dc.b2();
        assertEquals(dc.getState(), StateEnum.DISPLAY_DATE);
        dc.b2();
        assertEquals(dc.getState(), StateEnum.DISPLAY_HOUR);
    }

    @Test
    @DisplayName("Test transition B3 for Display methods")
    public void test4()
    {
        DigitalClock dc = new DigitalClock();
        assertEquals(dc.getState(), StateEnum.DISPLAY_HOUR);
        dc.b3();
        assertEquals(dc.getState(), StateEnum.SET_HOUR);
        dc.switchTo(new DisplaySecond());
        assertEquals(dc.getState(), StateEnum.DISPLAY_SECOND);
        dc.b3();
        assertEquals(dc.getState(), StateEnum.SET_SECOND);
        dc.switchTo(new DisplayDate());
        assertEquals(dc.getState(), StateEnum.DISPLAY_DATE);
        dc.b3();
        assertEquals(dc.getState(), StateEnum.SET_DATE);
    }

    @Test
    @DisplayName("Test transition B1 for Set methods")
    public void test5()
    {
        DigitalClock dc = new DigitalClock();
        dc.switchTo(new SetDate());
        assertEquals(dc.getState(), StateEnum.SET_DATE);
        dc.b1();
        assertEquals(dc.getState(), StateEnum.SET_SECOND);
        dc.b1();
        assertEquals(dc.getState(), StateEnum.SET_HOUR);
        dc.b1();
        assertEquals(dc.getState(), StateEnum.DISPLAY_HOUR);
    }

    @Test
    @DisplayName("Test transition B2 for Set methods")
    public void test6()
    {
        DigitalClock dc = new DigitalClock();
        dc.switchTo(new SetHour());
        assertEquals(dc.getState(), StateEnum.SET_HOUR);
        dc.b2();
        assertEquals(dc.getState(), StateEnum.SET_SECOND);
        dc.b2();
        assertEquals(dc.getState(), StateEnum.SET_DATE);
        dc.b2();
        assertEquals(dc.getState(), StateEnum.DISPLAY_DATE);
    }

    @Test
    @DisplayName("Test transition B3 for SetHour method")
    public void test7()
    {
        DigitalClock dc = new DigitalClock();
        dc.switchTo(new SetHour());
        assertEquals(dc.getState(), StateEnum.SET_HOUR);
        int initialHour = dc.getHours();
        dc.b3();
        assertEquals(dc.getHours(), initialHour + 1);
    }
}
